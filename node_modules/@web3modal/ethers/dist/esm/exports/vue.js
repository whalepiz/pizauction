import { AppKit } from '@web3modal/base';
import { EVMEthersClient } from '@web3modal/base/adapters/evm/ethers';
import { ConstantsUtil } from '@web3modal/scaffold-utils';
import {} from '@web3modal/scaffold-utils/ethers';
import { getWeb3Modal } from '@web3modal/base/utils/library/vue';
import { onUnmounted, ref } from 'vue';
export { defaultConfig } from '@web3modal/base/adapters/evm/ethers';
let appkit = undefined;
let ethersAdapter = undefined;
export function createWeb3Modal(options) {
    ethersAdapter = new EVMEthersClient({
        ethersConfig: options.ethersConfig,
        siweConfig: options.siweConfig,
        chains: options.chains,
        defaultChain: options.defaultChain
    });
    appkit = new AppKit({
        ...options,
        defaultChain: ethersAdapter.defaultChain,
        adapters: [ethersAdapter],
        sdkType: 'w3m',
        sdkVersion: `vue-ethers-${ConstantsUtil.VERSION}`
    });
    getWeb3Modal(appkit);
    return appkit;
}
export function useWeb3ModalProvider() {
    if (!ethersAdapter) {
        throw new Error('Please call "createWeb3Modal" before using "useWeb3ModalProvider" composition');
    }
    const walletProvider = ref(ethersAdapter.getWalletProvider());
    const walletProviderType = ref(ethersAdapter.getWalletProviderType());
    const unsubscribe = ethersAdapter.subscribeProvider(state => {
        walletProvider.value = state.provider;
        walletProviderType.value = state.providerType;
    });
    onUnmounted(() => {
        unsubscribe?.();
    });
    return {
        walletProvider,
        walletProviderType
    };
}
export function useDisconnect() {
    async function disconnect() {
        await ethersAdapter?.disconnect();
    }
    return {
        disconnect
    };
}
export function useSwitchNetwork() {
    async function switchNetwork(chainId) {
        await ethersAdapter?.switchNetwork(chainId);
    }
    return {
        switchNetwork
    };
}
export function useWeb3ModalAccount() {
    if (!ethersAdapter) {
        throw new Error('Please call "createWeb3Modal" before using "useWeb3ModalAccount" composition');
    }
    const address = ref(ethersAdapter.getAddress());
    const isConnected = ref(ethersAdapter.getIsConnected());
    const status = ref(ethersAdapter.getStatus());
    const chainId = ref(ethersAdapter.getChainId());
    const unsubscribe = ethersAdapter.subscribeProvider(state => {
        address.value = state.address;
        status.value = state.status;
        isConnected.value = state.isConnected;
        chainId.value = state.chainId;
    });
    onUnmounted(() => {
        unsubscribe?.();
    });
    return {
        address,
        isConnected,
        chainId
    };
}
export function useWeb3ModalError() {
    if (!ethersAdapter) {
        throw new Error('Please call "createWeb3Modal" before using "useWeb3ModalError" composition');
    }
    const error = ref(ethersAdapter.getError());
    const unsubscribe = ethersAdapter.subscribeProvider(state => {
        error.value = state.error;
    });
    onUnmounted(() => {
        unsubscribe?.();
    });
    return {
        error
    };
}
export { useWeb3ModalTheme, useWeb3Modal, useWeb3ModalState, useWeb3ModalEvents, useWalletInfo } from '@web3modal/base/utils/library/vue';
//# sourceMappingURL=vue.js.map